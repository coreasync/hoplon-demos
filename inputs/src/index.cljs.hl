(page "index.html"
  (:require [tailrecursion.hoplon.reload :refer [reload-all]]))

;; This line makes the browser check for an update every second and reloads
;; when the css or main.js changed.
(reload-all 1000)

;; Cells for each input example.
(defc text-input "")
(defc range-input 20)
(defc select-input "green")
(defc multi-select #{"green"})
(defc check-box false)
(defc radio-input "b")

(html
  (head
    (title "Hoplon â€¢ Inputs"))
  (body
    (h1 "Inputs and state in Hoplon")
    (p "Each input example has a corresponding Javelin cell.
      When you change the input its cell is updated.")
    (h2 "A simple text input")
    (p "This shows that you can have more than one field pointing to the same
      cell. Edit one input and see everything change in sync.")
    (input
      :type "text"
      :placeholder "Type something here"

      ;; The cell is used as the value of the input.
      :value text-input

      ;; The on-keyup event fires on every keystroke for demo purposes. In
      ;; practice you should only update on-blur or on-change.
      :keyup #(reset! text-input @%))
      ;; On all the examples we are using the event to get the value of the
      ;; input. So no id is necessary.

    ;; This second input is just to show that you can point two inputs to the
    ;; same cell and update them in sync. It's the same as the first input.
    (input
      :type "text"
      :placeholder "Type something here"
      :value text-input
      :keyup #(reset! text-input @%))
    (p (text "Value of text input: ~{text-input}"))

    (h2 "A range input")
    (p "Every example gets the value from a cell and updates it when it changes.")
    (input
      :style "width:400px"
      :type "range" :min 0 :max 100 :step 1
      :value range-input
      :input #(reset! range-input @%))
    (p (text "Value of range input: ~{range-input}"))

    (h2 "A select input")
    (select
      :change #(reset! select-input @%)
      :value select-input
      (option :value "blue"  "blue")
      (option :value "green" "green")
      (option :value "gold" "gold")
      (option :value "indigo" "indigo"))
    (p (text "Value of select input: ~{select-input}"))
    (h2 "A dynamic select input")
    (defc dynamic-select-input "gold")
    (defc dynamic-options [1 2 3])
    (input
     :type "text"
     :placeholder "Type something here"
     :value text-input
     :change #(do
                (reset! dynamic-select-input @%)
                (reset! dynamic-options (repeat 10 @%))
                (.log js/console (str @dynamic-options))
                )
     )

    (p (text "Value of text input: ~{(inc (js/parseInt dynamic-select-input))}"))
    (select
     :change #(reset! dynamic-select-input @%)
     :value dynamic-select-input
     (option :value "blue"  "Blue")
     (option :value "green" "Green")
     (option :value "gold" "Gold")
     (option :value "indigo" "Indigo")
     (loop-tpl :bindings [n dynamic-options]
               (option (str "option:" @n)))
     )

    (ul "DEBUG"
     (loop-tpl :bindings [n dynamic-options]
               (li (text (str n))))
     )

    (h2 "Multiple select input")
    (select

      ;; The handler is more complex here because of the parsing of the
      ;; selectedOptions object. The cell is a set in this case.
      :change #(let [options (.. % -target -selectedOptions)
                     l (.-length options)]
                 (reset! multi-select
                   (set
                     (for [i (range l)]
                       (.-value (.item options i))))))
      :multiple "true"

      ;; You need to check each option value against the multi-select cell to
      ;; se if it should be selected.
      (option :selected (cell= (multi-select "blue")) :value "blue" "blue")
      (option :selected (cell= (multi-select "green")) :value "green" "green")
      (option :selected (cell= (multi-select "gold")) :value "gold" "gold")
      (option :selected (cell= (multi-select "indigo")) :value "indigo" "indigo"))
    (p (text "Value of multiple select input: ~{multi-select}"))

    (h2 "A checkbox")
    (label
      (input
        :type "checkbox"

        ;; On checkboxes you need to return true from the handler or the
        ;; checkbox will not uncheck (at the moment).
        :click #(do
                  (swap! check-box not)
                  true)
        :value check-box)
        "Checkbox")
    (p (text "Value of checkbox: ~{check-box}"))

    (h2 "A radio button")

    ;; Radio buttons require more code, but work fine with cells too.
    (label
      (input
        :type "radio"
        :click #(reset! radio-input @%)

        ;; You need to check each input to se if it is checked.
        :checked (cell= (= "a" radio-input))
        :name "radio-group"
        :value "a")
      "a")

    (label
      (input
        :type "radio"
        :click #(reset! radio-input @%)
        :checked (cell= (= "b" radio-input))
        :name "radio-group"
        :value "b")
      "b")
    (p (text "Selected radio: ~{radio-input}"))))
